/**
 * This file was automatically generated by nexus-prisma@0.3.7
 * Do not make changes to this file directly
 */

import { core } from 'nexus'
import { GraphQLResolveInfo } from 'graphql'
import * as prisma from '../prisma-client'

declare global {
  interface NexusPrismaGen extends NexusPrismaTypes {}
}

export interface NexusPrismaTypes {
  objectTypes: {
    fields: {
      Query: QueryObject
      Doctor: DoctorObject
      Patient: PatientObject
      Survey: SurveyObject
      DoctorConnection: DoctorConnectionObject
      PageInfo: PageInfoObject
      DoctorEdge: DoctorEdgeObject
      AggregateDoctor: AggregateDoctorObject
      PatientConnection: PatientConnectionObject
      PatientEdge: PatientEdgeObject
      AggregatePatient: AggregatePatientObject
      SurveyConnection: SurveyConnectionObject
      SurveyEdge: SurveyEdgeObject
      AggregateSurvey: AggregateSurveyObject
      Mutation: MutationObject
      BatchPayload: BatchPayloadObject
      Subscription: SubscriptionObject
      DoctorSubscriptionPayload: DoctorSubscriptionPayloadObject
      DoctorPreviousValues: DoctorPreviousValuesObject
      PatientSubscriptionPayload: PatientSubscriptionPayloadObject
      PatientPreviousValues: PatientPreviousValuesObject
      SurveySubscriptionPayload: SurveySubscriptionPayloadObject
      SurveyPreviousValues: SurveyPreviousValuesObject
    }
    fieldsDetails: {
      Query: QueryFieldDetails
      Doctor: DoctorFieldDetails
      Patient: PatientFieldDetails
      Survey: SurveyFieldDetails
      DoctorConnection: DoctorConnectionFieldDetails
      PageInfo: PageInfoFieldDetails
      DoctorEdge: DoctorEdgeFieldDetails
      AggregateDoctor: AggregateDoctorFieldDetails
      PatientConnection: PatientConnectionFieldDetails
      PatientEdge: PatientEdgeFieldDetails
      AggregatePatient: AggregatePatientFieldDetails
      SurveyConnection: SurveyConnectionFieldDetails
      SurveyEdge: SurveyEdgeFieldDetails
      AggregateSurvey: AggregateSurveyFieldDetails
      Mutation: MutationFieldDetails
      BatchPayload: BatchPayloadFieldDetails
      Subscription: SubscriptionFieldDetails
      DoctorSubscriptionPayload: DoctorSubscriptionPayloadFieldDetails
      DoctorPreviousValues: DoctorPreviousValuesFieldDetails
      PatientSubscriptionPayload: PatientSubscriptionPayloadFieldDetails
      PatientPreviousValues: PatientPreviousValuesFieldDetails
      SurveySubscriptionPayload: SurveySubscriptionPayloadFieldDetails
      SurveyPreviousValues: SurveyPreviousValuesFieldDetails
    }
  }
  inputTypes: {
    fields: {
      DoctorWhereUniqueInput: DoctorWhereUniqueInputInputObject
      PatientWhereInput: PatientWhereInputInputObject
      DoctorWhereInput: DoctorWhereInputInputObject
      SurveyWhereInput: SurveyWhereInputInputObject
      PatientWhereUniqueInput: PatientWhereUniqueInputInputObject
      SurveyWhereUniqueInput: SurveyWhereUniqueInputInputObject
      DoctorCreateInput: DoctorCreateInputInputObject
      PatientCreateManyWithoutDoctorsInput: PatientCreateManyWithoutDoctorsInputInputObject
      PatientCreateWithoutDoctorsInput: PatientCreateWithoutDoctorsInputInputObject
      SurveyCreateManyWithoutPatientInput: SurveyCreateManyWithoutPatientInputInputObject
      SurveyCreateWithoutPatientInput: SurveyCreateWithoutPatientInputInputObject
      DoctorCreateOneWithoutSurveysInput: DoctorCreateOneWithoutSurveysInputInputObject
      DoctorCreateWithoutSurveysInput: DoctorCreateWithoutSurveysInputInputObject
      SurveyCreateManyWithoutSubmitterInput: SurveyCreateManyWithoutSubmitterInputInputObject
      SurveyCreateWithoutSubmitterInput: SurveyCreateWithoutSubmitterInputInputObject
      PatientCreateOneWithoutSurveysInput: PatientCreateOneWithoutSurveysInputInputObject
      PatientCreateWithoutSurveysInput: PatientCreateWithoutSurveysInputInputObject
      DoctorCreateManyWithoutPatientsInput: DoctorCreateManyWithoutPatientsInputInputObject
      DoctorCreateWithoutPatientsInput: DoctorCreateWithoutPatientsInputInputObject
      DoctorUpdateInput: DoctorUpdateInputInputObject
      PatientUpdateManyWithoutDoctorsInput: PatientUpdateManyWithoutDoctorsInputInputObject
      PatientUpdateWithWhereUniqueWithoutDoctorsInput: PatientUpdateWithWhereUniqueWithoutDoctorsInputInputObject
      PatientUpdateWithoutDoctorsDataInput: PatientUpdateWithoutDoctorsDataInputInputObject
      SurveyUpdateManyWithoutPatientInput: SurveyUpdateManyWithoutPatientInputInputObject
      SurveyUpdateWithWhereUniqueWithoutPatientInput: SurveyUpdateWithWhereUniqueWithoutPatientInputInputObject
      SurveyUpdateWithoutPatientDataInput: SurveyUpdateWithoutPatientDataInputInputObject
      DoctorUpdateOneRequiredWithoutSurveysInput: DoctorUpdateOneRequiredWithoutSurveysInputInputObject
      DoctorUpdateWithoutSurveysDataInput: DoctorUpdateWithoutSurveysDataInputInputObject
      DoctorUpsertWithoutSurveysInput: DoctorUpsertWithoutSurveysInputInputObject
      SurveyUpsertWithWhereUniqueWithoutPatientInput: SurveyUpsertWithWhereUniqueWithoutPatientInputInputObject
      SurveyScalarWhereInput: SurveyScalarWhereInputInputObject
      SurveyUpdateManyWithWhereNestedInput: SurveyUpdateManyWithWhereNestedInputInputObject
      SurveyUpdateManyDataInput: SurveyUpdateManyDataInputInputObject
      PatientUpsertWithWhereUniqueWithoutDoctorsInput: PatientUpsertWithWhereUniqueWithoutDoctorsInputInputObject
      PatientScalarWhereInput: PatientScalarWhereInputInputObject
      PatientUpdateManyWithWhereNestedInput: PatientUpdateManyWithWhereNestedInputInputObject
      PatientUpdateManyDataInput: PatientUpdateManyDataInputInputObject
      SurveyUpdateManyWithoutSubmitterInput: SurveyUpdateManyWithoutSubmitterInputInputObject
      SurveyUpdateWithWhereUniqueWithoutSubmitterInput: SurveyUpdateWithWhereUniqueWithoutSubmitterInputInputObject
      SurveyUpdateWithoutSubmitterDataInput: SurveyUpdateWithoutSubmitterDataInputInputObject
      PatientUpdateOneRequiredWithoutSurveysInput: PatientUpdateOneRequiredWithoutSurveysInputInputObject
      PatientUpdateWithoutSurveysDataInput: PatientUpdateWithoutSurveysDataInputInputObject
      DoctorUpdateManyWithoutPatientsInput: DoctorUpdateManyWithoutPatientsInputInputObject
      DoctorUpdateWithWhereUniqueWithoutPatientsInput: DoctorUpdateWithWhereUniqueWithoutPatientsInputInputObject
      DoctorUpdateWithoutPatientsDataInput: DoctorUpdateWithoutPatientsDataInputInputObject
      DoctorUpsertWithWhereUniqueWithoutPatientsInput: DoctorUpsertWithWhereUniqueWithoutPatientsInputInputObject
      DoctorScalarWhereInput: DoctorScalarWhereInputInputObject
      DoctorUpdateManyWithWhereNestedInput: DoctorUpdateManyWithWhereNestedInputInputObject
      DoctorUpdateManyDataInput: DoctorUpdateManyDataInputInputObject
      PatientUpsertWithoutSurveysInput: PatientUpsertWithoutSurveysInputInputObject
      SurveyUpsertWithWhereUniqueWithoutSubmitterInput: SurveyUpsertWithWhereUniqueWithoutSubmitterInputInputObject
      DoctorUpdateManyMutationInput: DoctorUpdateManyMutationInputInputObject
      PatientCreateInput: PatientCreateInputInputObject
      PatientUpdateInput: PatientUpdateInputInputObject
      PatientUpdateManyMutationInput: PatientUpdateManyMutationInputInputObject
      SurveyCreateInput: SurveyCreateInputInputObject
      SurveyUpdateInput: SurveyUpdateInputInputObject
      SurveyUpdateManyMutationInput: SurveyUpdateManyMutationInputInputObject
      DoctorSubscriptionWhereInput: DoctorSubscriptionWhereInputInputObject
      PatientSubscriptionWhereInput: PatientSubscriptionWhereInputInputObject
      SurveySubscriptionWhereInput: SurveySubscriptionWhereInputInputObject
    }
  }
  enumTypes: {
    PatientOrderByInput: PatientOrderByInputValues,
    DoctorOrderByInput: DoctorOrderByInputValues,
    SurveyOrderByInput: SurveyOrderByInputValues,
    MutationType: MutationTypeValues,
  }
}

// Types for Query

type QueryObject =
  | QueryFields
  | { name: 'doctor', args?: QueryDoctorArgs[] | false, alias?: string  } 
  | { name: 'doctors', args?: QueryDoctorsArgs[] | false, alias?: string  } 
  | { name: 'doctorsConnection', args?: QueryDoctorsConnectionArgs[] | false, alias?: string  } 
  | { name: 'patient', args?: QueryPatientArgs[] | false, alias?: string  } 
  | { name: 'patients', args?: QueryPatientsArgs[] | false, alias?: string  } 
  | { name: 'patientsConnection', args?: QueryPatientsConnectionArgs[] | false, alias?: string  } 
  | { name: 'survey', args?: QuerySurveyArgs[] | false, alias?: string  } 
  | { name: 'surveys', args?: QuerySurveysArgs[] | false, alias?: string  } 
  | { name: 'surveysConnection', args?: QuerySurveysConnectionArgs[] | false, alias?: string  } 

type QueryFields =
  | 'doctor'
  | 'doctors'
  | 'doctorsConnection'
  | 'patient'
  | 'patients'
  | 'patientsConnection'
  | 'survey'
  | 'surveys'
  | 'surveysConnection'


type QueryDoctorArgs =
  | 'where'
type QueryDoctorsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryDoctorsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPatientArgs =
  | 'where'
type QueryPatientsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QueryPatientsConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QuerySurveyArgs =
  | 'where'
type QuerySurveysArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type QuerySurveysConnectionArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface QueryFieldDetails {
  doctor: {
    type: 'Doctor'
    args: Record<QueryDoctorArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: DoctorWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Doctor | null> | prisma.Doctor | null
  }
  doctors: {
    type: 'Doctor'
    args: Record<QueryDoctorsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: DoctorWhereInput | null, orderBy?: prisma.DoctorOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Doctor[]> | prisma.Doctor[]
  }
  doctorsConnection: {
    type: 'DoctorConnection'
    args: Record<QueryDoctorsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: DoctorWhereInput | null, orderBy?: prisma.DoctorOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DoctorConnection> | prisma.DoctorConnection
  }
  patient: {
    type: 'Patient'
    args: Record<QueryPatientArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: PatientWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Patient | null> | prisma.Patient | null
  }
  patients: {
    type: 'Patient'
    args: Record<QueryPatientsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PatientWhereInput | null, orderBy?: prisma.PatientOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Patient[]> | prisma.Patient[]
  }
  patientsConnection: {
    type: 'PatientConnection'
    args: Record<QueryPatientsConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: PatientWhereInput | null, orderBy?: prisma.PatientOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PatientConnection> | prisma.PatientConnection
  }
  survey: {
    type: 'Survey'
    args: Record<QuerySurveyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Query">,
      args: { where: SurveyWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Survey | null> | prisma.Survey | null
  }
  surveys: {
    type: 'Survey'
    args: Record<QuerySurveysArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: SurveyWhereInput | null, orderBy?: prisma.SurveyOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Survey[]> | prisma.Survey[]
  }
  surveysConnection: {
    type: 'SurveyConnection'
    args: Record<QuerySurveysConnectionArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Query">,
      args: { where?: SurveyWhereInput | null, orderBy?: prisma.SurveyOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SurveyConnection> | prisma.SurveyConnection
  }
}
  

// Types for Doctor

type DoctorObject =
  | DoctorFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'speciality', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'patients', args?: DoctorPatientsArgs[] | false, alias?: string  } 
  | { name: 'surveys', args?: DoctorSurveysArgs[] | false, alias?: string  } 

type DoctorFields =
  | 'id'
  | 'email'
  | 'password'
  | 'speciality'
  | 'name'
  | 'patients'
  | 'surveys'


type DoctorPatientsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type DoctorSurveysArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface DoctorFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  speciality: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  patients: {
    type: 'Patient'
    args: Record<DoctorPatientsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Doctor">,
      args: { where?: PatientWhereInput | null, orderBy?: prisma.PatientOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Patient[]> | prisma.Patient[]
  }
  surveys: {
    type: 'Survey'
    args: Record<DoctorSurveysArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Doctor">,
      args: { where?: SurveyWhereInput | null, orderBy?: prisma.SurveyOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Survey[]> | prisma.Survey[]
  }
}
  

// Types for Patient

type PatientObject =
  | PatientFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'birthday', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 
  | { name: 'doctors', args?: PatientDoctorsArgs[] | false, alias?: string  } 
  | { name: 'surveys', args?: PatientSurveysArgs[] | false, alias?: string  } 

type PatientFields =
  | 'id'
  | 'email'
  | 'password'
  | 'birthday'
  | 'name'
  | 'doctors'
  | 'surveys'


type PatientDoctorsArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
type PatientSurveysArgs =
  | 'where'
  | 'orderBy'
  | 'skip'
  | 'after'
  | 'before'
  | 'first'
  | 'last'
  

export interface PatientFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  birthday: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  doctors: {
    type: 'Doctor'
    args: Record<PatientDoctorsArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Patient">,
      args: { where?: DoctorWhereInput | null, orderBy?: prisma.DoctorOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Doctor[]> | prisma.Doctor[]
  }
  surveys: {
    type: 'Survey'
    args: Record<PatientSurveysArgs, core.NexusArgDef<string>>
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"Patient">,
      args: { where?: SurveyWhereInput | null, orderBy?: prisma.SurveyOrderByInput | null, skip?: number | null, after?: string | null, before?: string | null, first?: number | null, last?: number | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Survey[]> | prisma.Survey[]
  }
}
  

// Types for Survey

type SurveyObject =
  | SurveyFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'published', args?: [] | false, alias?: string  } 
  | { name: 'answered', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'content', args?: [] | false, alias?: string  } 
  | { name: 'submitter', args?: [] | false, alias?: string  } 
  | { name: 'patient', args?: [] | false, alias?: string  } 

type SurveyFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'published'
  | 'answered'
  | 'title'
  | 'content'
  | 'submitter'
  | 'patient'



  

export interface SurveyFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  published: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  answered: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  content: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  submitter: {
    type: 'Doctor'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Survey">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Doctor> | prisma.Doctor
  }
  patient: {
    type: 'Patient'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Survey">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Patient> | prisma.Patient
  }
}
  

// Types for DoctorConnection

type DoctorConnectionObject =
  | DoctorConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type DoctorConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface DoctorConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DoctorConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'DoctorEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"DoctorConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DoctorEdge[]> | prisma.DoctorEdge[]
  }
  aggregate: {
    type: 'AggregateDoctor'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DoctorConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateDoctor> | prisma.AggregateDoctor
  }
}
  

// Types for PageInfo

type PageInfoObject =
  | PageInfoFields
  | { name: 'hasNextPage', args?: [] | false, alias?: string  } 
  | { name: 'hasPreviousPage', args?: [] | false, alias?: string  } 
  | { name: 'startCursor', args?: [] | false, alias?: string  } 
  | { name: 'endCursor', args?: [] | false, alias?: string  } 

type PageInfoFields =
  | 'hasNextPage'
  | 'hasPreviousPage'
  | 'startCursor'
  | 'endCursor'



  

export interface PageInfoFieldDetails {
  hasNextPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  hasPreviousPage: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  startCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
  endCursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: undefined
  }
}
  

// Types for DoctorEdge

type DoctorEdgeObject =
  | DoctorEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type DoctorEdgeFields =
  | 'node'
  | 'cursor'



  

export interface DoctorEdgeFieldDetails {
  node: {
    type: 'Doctor'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DoctorEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Doctor> | prisma.Doctor
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateDoctor

type AggregateDoctorObject =
  | AggregateDoctorFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateDoctorFields =
  | 'count'



  

export interface AggregateDoctorFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PatientConnection

type PatientConnectionObject =
  | PatientConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type PatientConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface PatientConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PatientConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'PatientEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"PatientConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PatientEdge[]> | prisma.PatientEdge[]
  }
  aggregate: {
    type: 'AggregatePatient'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PatientConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregatePatient> | prisma.AggregatePatient
  }
}
  

// Types for PatientEdge

type PatientEdgeObject =
  | PatientEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type PatientEdgeFields =
  | 'node'
  | 'cursor'



  

export interface PatientEdgeFieldDetails {
  node: {
    type: 'Patient'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PatientEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Patient> | prisma.Patient
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregatePatient

type AggregatePatientObject =
  | AggregatePatientFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregatePatientFields =
  | 'count'



  

export interface AggregatePatientFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for SurveyConnection

type SurveyConnectionObject =
  | SurveyConnectionFields
  | { name: 'pageInfo', args?: [] | false, alias?: string  } 
  | { name: 'edges', args?: [] | false, alias?: string  } 
  | { name: 'aggregate', args?: [] | false, alias?: string  } 

type SurveyConnectionFields =
  | 'pageInfo'
  | 'edges'
  | 'aggregate'



  

export interface SurveyConnectionFieldDetails {
  pageInfo: {
    type: 'PageInfo'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SurveyConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PageInfo> | prisma.PageInfo
  }
  edges: {
    type: 'SurveyEdge'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: (
      root: core.RootValue<"SurveyConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SurveyEdge[]> | prisma.SurveyEdge[]
  }
  aggregate: {
    type: 'AggregateSurvey'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SurveyConnection">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.AggregateSurvey> | prisma.AggregateSurvey
  }
}
  

// Types for SurveyEdge

type SurveyEdgeObject =
  | SurveyEdgeFields
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'cursor', args?: [] | false, alias?: string  } 

type SurveyEdgeFields =
  | 'node'
  | 'cursor'



  

export interface SurveyEdgeFieldDetails {
  node: {
    type: 'Survey'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SurveyEdge">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Survey> | prisma.Survey
  }
  cursor: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for AggregateSurvey

type AggregateSurveyObject =
  | AggregateSurveyFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type AggregateSurveyFields =
  | 'count'



  

export interface AggregateSurveyFieldDetails {
  count: {
    type: 'Int'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Mutation

type MutationObject =
  | MutationFields
  | { name: 'createDoctor', args?: MutationCreateDoctorArgs[] | false, alias?: string  } 
  | { name: 'updateDoctor', args?: MutationUpdateDoctorArgs[] | false, alias?: string  } 
  | { name: 'updateManyDoctors', args?: MutationUpdateManyDoctorsArgs[] | false, alias?: string  } 
  | { name: 'upsertDoctor', args?: MutationUpsertDoctorArgs[] | false, alias?: string  } 
  | { name: 'deleteDoctor', args?: MutationDeleteDoctorArgs[] | false, alias?: string  } 
  | { name: 'deleteManyDoctors', args?: MutationDeleteManyDoctorsArgs[] | false, alias?: string  } 
  | { name: 'createPatient', args?: MutationCreatePatientArgs[] | false, alias?: string  } 
  | { name: 'updatePatient', args?: MutationUpdatePatientArgs[] | false, alias?: string  } 
  | { name: 'updateManyPatients', args?: MutationUpdateManyPatientsArgs[] | false, alias?: string  } 
  | { name: 'upsertPatient', args?: MutationUpsertPatientArgs[] | false, alias?: string  } 
  | { name: 'deletePatient', args?: MutationDeletePatientArgs[] | false, alias?: string  } 
  | { name: 'deleteManyPatients', args?: MutationDeleteManyPatientsArgs[] | false, alias?: string  } 
  | { name: 'createSurvey', args?: MutationCreateSurveyArgs[] | false, alias?: string  } 
  | { name: 'updateSurvey', args?: MutationUpdateSurveyArgs[] | false, alias?: string  } 
  | { name: 'updateManySurveys', args?: MutationUpdateManySurveysArgs[] | false, alias?: string  } 
  | { name: 'upsertSurvey', args?: MutationUpsertSurveyArgs[] | false, alias?: string  } 
  | { name: 'deleteSurvey', args?: MutationDeleteSurveyArgs[] | false, alias?: string  } 
  | { name: 'deleteManySurveys', args?: MutationDeleteManySurveysArgs[] | false, alias?: string  } 

type MutationFields =
  | 'createDoctor'
  | 'updateDoctor'
  | 'updateManyDoctors'
  | 'upsertDoctor'
  | 'deleteDoctor'
  | 'deleteManyDoctors'
  | 'createPatient'
  | 'updatePatient'
  | 'updateManyPatients'
  | 'upsertPatient'
  | 'deletePatient'
  | 'deleteManyPatients'
  | 'createSurvey'
  | 'updateSurvey'
  | 'updateManySurveys'
  | 'upsertSurvey'
  | 'deleteSurvey'
  | 'deleteManySurveys'


type MutationCreateDoctorArgs =
  | 'data'
type MutationUpdateDoctorArgs =
  | 'data'
  | 'where'
type MutationUpdateManyDoctorsArgs =
  | 'data'
  | 'where'
type MutationUpsertDoctorArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteDoctorArgs =
  | 'where'
type MutationDeleteManyDoctorsArgs =
  | 'where'
type MutationCreatePatientArgs =
  | 'data'
type MutationUpdatePatientArgs =
  | 'data'
  | 'where'
type MutationUpdateManyPatientsArgs =
  | 'data'
  | 'where'
type MutationUpsertPatientArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeletePatientArgs =
  | 'where'
type MutationDeleteManyPatientsArgs =
  | 'where'
type MutationCreateSurveyArgs =
  | 'data'
type MutationUpdateSurveyArgs =
  | 'data'
  | 'where'
type MutationUpdateManySurveysArgs =
  | 'data'
  | 'where'
type MutationUpsertSurveyArgs =
  | 'where'
  | 'create'
  | 'update'
type MutationDeleteSurveyArgs =
  | 'where'
type MutationDeleteManySurveysArgs =
  | 'where'
  

export interface MutationFieldDetails {
  createDoctor: {
    type: 'Doctor'
    args: Record<MutationCreateDoctorArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: DoctorCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Doctor> | prisma.Doctor
  }
  updateDoctor: {
    type: 'Doctor'
    args: Record<MutationUpdateDoctorArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: DoctorUpdateInput, where: DoctorWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Doctor | null> | prisma.Doctor | null
  }
  updateManyDoctors: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyDoctorsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: DoctorUpdateManyMutationInput, where?: DoctorWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertDoctor: {
    type: 'Doctor'
    args: Record<MutationUpsertDoctorArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: DoctorWhereUniqueInput, create: DoctorCreateInput, update: DoctorUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Doctor> | prisma.Doctor
  }
  deleteDoctor: {
    type: 'Doctor'
    args: Record<MutationDeleteDoctorArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: DoctorWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Doctor | null> | prisma.Doctor | null
  }
  deleteManyDoctors: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyDoctorsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: DoctorWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createPatient: {
    type: 'Patient'
    args: Record<MutationCreatePatientArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PatientCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Patient> | prisma.Patient
  }
  updatePatient: {
    type: 'Patient'
    args: Record<MutationUpdatePatientArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PatientUpdateInput, where: PatientWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Patient | null> | prisma.Patient | null
  }
  updateManyPatients: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManyPatientsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: PatientUpdateManyMutationInput, where?: PatientWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertPatient: {
    type: 'Patient'
    args: Record<MutationUpsertPatientArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PatientWhereUniqueInput, create: PatientCreateInput, update: PatientUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Patient> | prisma.Patient
  }
  deletePatient: {
    type: 'Patient'
    args: Record<MutationDeletePatientArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: PatientWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Patient | null> | prisma.Patient | null
  }
  deleteManyPatients: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManyPatientsArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: PatientWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  createSurvey: {
    type: 'Survey'
    args: Record<MutationCreateSurveyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: SurveyCreateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Survey> | prisma.Survey
  }
  updateSurvey: {
    type: 'Survey'
    args: Record<MutationUpdateSurveyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: SurveyUpdateInput, where: SurveyWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Survey | null> | prisma.Survey | null
  }
  updateManySurveys: {
    type: 'BatchPayload'
    args: Record<MutationUpdateManySurveysArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { data: SurveyUpdateManyMutationInput, where?: SurveyWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
  upsertSurvey: {
    type: 'Survey'
    args: Record<MutationUpsertSurveyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: SurveyWhereUniqueInput, create: SurveyCreateInput, update: SurveyUpdateInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Survey> | prisma.Survey
  }
  deleteSurvey: {
    type: 'Survey'
    args: Record<MutationDeleteSurveyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where: SurveyWhereUniqueInput }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Survey | null> | prisma.Survey | null
  }
  deleteManySurveys: {
    type: 'BatchPayload'
    args: Record<MutationDeleteManySurveysArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"Mutation">,
      args: { where?: SurveyWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.BatchPayload> | prisma.BatchPayload
  }
}
  

// Types for BatchPayload

type BatchPayloadObject =
  | BatchPayloadFields
  | { name: 'count', args?: [] | false, alias?: string  } 

type BatchPayloadFields =
  | 'count'



  

export interface BatchPayloadFieldDetails {
  count: {
    type: 'Long'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for Subscription

type SubscriptionObject =
  | SubscriptionFields
  | { name: 'doctor', args?: SubscriptionDoctorArgs[] | false, alias?: string  } 
  | { name: 'patient', args?: SubscriptionPatientArgs[] | false, alias?: string  } 
  | { name: 'survey', args?: SubscriptionSurveyArgs[] | false, alias?: string  } 

type SubscriptionFields =
  | 'doctor'
  | 'patient'
  | 'survey'


type SubscriptionDoctorArgs =
  | 'where'
type SubscriptionPatientArgs =
  | 'where'
type SubscriptionSurveyArgs =
  | 'where'
  

export interface SubscriptionFieldDetails {
  doctor: {
    type: 'DoctorSubscriptionPayload'
    args: Record<SubscriptionDoctorArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: DoctorSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DoctorSubscriptionPayload | null> | prisma.DoctorSubscriptionPayload | null
  }
  patient: {
    type: 'PatientSubscriptionPayload'
    args: Record<SubscriptionPatientArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: PatientSubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PatientSubscriptionPayload | null> | prisma.PatientSubscriptionPayload | null
  }
  survey: {
    type: 'SurveySubscriptionPayload'
    args: Record<SubscriptionSurveyArgs, core.NexusArgDef<string>>
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"Subscription">,
      args: { where?: SurveySubscriptionWhereInput | null }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SurveySubscriptionPayload | null> | prisma.SurveySubscriptionPayload | null
  }
}
  

// Types for DoctorSubscriptionPayload

type DoctorSubscriptionPayloadObject =
  | DoctorSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type DoctorSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface DoctorSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"DoctorSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Doctor'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"DoctorSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Doctor | null> | prisma.Doctor | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'DoctorPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"DoctorSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.DoctorPreviousValues | null> | prisma.DoctorPreviousValues | null
  }
}
  

// Types for DoctorPreviousValues

type DoctorPreviousValuesObject =
  | DoctorPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'speciality', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 

type DoctorPreviousValuesFields =
  | 'id'
  | 'email'
  | 'password'
  | 'speciality'
  | 'name'



  

export interface DoctorPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  speciality: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for PatientSubscriptionPayload

type PatientSubscriptionPayloadObject =
  | PatientSubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type PatientSubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface PatientSubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"PatientSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Patient'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PatientSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Patient | null> | prisma.Patient | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'PatientPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"PatientSubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.PatientPreviousValues | null> | prisma.PatientPreviousValues | null
  }
}
  

// Types for PatientPreviousValues

type PatientPreviousValuesObject =
  | PatientPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'email', args?: [] | false, alias?: string  } 
  | { name: 'password', args?: [] | false, alias?: string  } 
  | { name: 'birthday', args?: [] | false, alias?: string  } 
  | { name: 'name', args?: [] | false, alias?: string  } 

type PatientPreviousValuesFields =
  | 'id'
  | 'email'
  | 'password'
  | 'birthday'
  | 'name'



  

export interface PatientPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  email: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  password: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  birthday: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  name: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  

// Types for SurveySubscriptionPayload

type SurveySubscriptionPayloadObject =
  | SurveySubscriptionPayloadFields
  | { name: 'mutation', args?: [] | false, alias?: string  } 
  | { name: 'node', args?: [] | false, alias?: string  } 
  | { name: 'updatedFields', args?: [] | false, alias?: string  } 
  | { name: 'previousValues', args?: [] | false, alias?: string  } 

type SurveySubscriptionPayloadFields =
  | 'mutation'
  | 'node'
  | 'updatedFields'
  | 'previousValues'



  

export interface SurveySubscriptionPayloadFieldDetails {
  mutation: {
    type: 'MutationType'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: (
      root: core.RootValue<"SurveySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.MutationType> | prisma.MutationType
  }
  node: {
    type: 'Survey'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"SurveySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.Survey | null> | prisma.Survey | null
  }
  updatedFields: {
    type: 'String'
    args: {}
    description: string
    list: true
    nullable: false
    resolve: undefined
  }
  previousValues: {
    type: 'SurveyPreviousValues'
    args: {}
    description: string
    list: undefined
    nullable: true
    resolve: (
      root: core.RootValue<"SurveySubscriptionPayload">,
      args: {  }  ,
      context: core.GetGen<"context">,
      info?: GraphQLResolveInfo
    ) => Promise<prisma.SurveyPreviousValues | null> | prisma.SurveyPreviousValues | null
  }
}
  

// Types for SurveyPreviousValues

type SurveyPreviousValuesObject =
  | SurveyPreviousValuesFields
  | { name: 'id', args?: [] | false, alias?: string  } 
  | { name: 'createdAt', args?: [] | false, alias?: string  } 
  | { name: 'updatedAt', args?: [] | false, alias?: string  } 
  | { name: 'published', args?: [] | false, alias?: string  } 
  | { name: 'answered', args?: [] | false, alias?: string  } 
  | { name: 'title', args?: [] | false, alias?: string  } 
  | { name: 'content', args?: [] | false, alias?: string  } 

type SurveyPreviousValuesFields =
  | 'id'
  | 'createdAt'
  | 'updatedAt'
  | 'published'
  | 'answered'
  | 'title'
  | 'content'



  

export interface SurveyPreviousValuesFieldDetails {
  id: {
    type: 'ID'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  createdAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  updatedAt: {
    type: 'DateTime'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  published: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  answered: {
    type: 'Boolean'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  title: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
  content: {
    type: 'String'
    args: {}
    description: string
    list: undefined
    nullable: false
    resolve: undefined
  }
}
  


export interface DoctorWhereUniqueInput {
  id?: string | null
  email?: string | null
}
export type DoctorWhereUniqueInputInputObject =
  | Extract<keyof DoctorWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  
export interface PatientWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  password?: string | null
  password_not?: string | null
  password_in?: string[]
  password_not_in?: string[]
  password_lt?: string | null
  password_lte?: string | null
  password_gt?: string | null
  password_gte?: string | null
  password_contains?: string | null
  password_not_contains?: string | null
  password_starts_with?: string | null
  password_not_starts_with?: string | null
  password_ends_with?: string | null
  password_not_ends_with?: string | null
  birthday?: string | null
  birthday_not?: string | null
  birthday_in?: string[]
  birthday_not_in?: string[]
  birthday_lt?: string | null
  birthday_lte?: string | null
  birthday_gt?: string | null
  birthday_gte?: string | null
  birthday_contains?: string | null
  birthday_not_contains?: string | null
  birthday_starts_with?: string | null
  birthday_not_starts_with?: string | null
  birthday_ends_with?: string | null
  birthday_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  doctors_every?: DoctorWhereInput | null
  doctors_some?: DoctorWhereInput | null
  doctors_none?: DoctorWhereInput | null
  surveys_every?: SurveyWhereInput | null
  surveys_some?: SurveyWhereInput | null
  surveys_none?: SurveyWhereInput | null
  AND?: PatientWhereInput[]
  OR?: PatientWhereInput[]
  NOT?: PatientWhereInput[]
}
export type PatientWhereInputInputObject =
  | Extract<keyof PatientWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'password_not', alias?: string  } 
  | { name: 'password_in', alias?: string  } 
  | { name: 'password_not_in', alias?: string  } 
  | { name: 'password_lt', alias?: string  } 
  | { name: 'password_lte', alias?: string  } 
  | { name: 'password_gt', alias?: string  } 
  | { name: 'password_gte', alias?: string  } 
  | { name: 'password_contains', alias?: string  } 
  | { name: 'password_not_contains', alias?: string  } 
  | { name: 'password_starts_with', alias?: string  } 
  | { name: 'password_not_starts_with', alias?: string  } 
  | { name: 'password_ends_with', alias?: string  } 
  | { name: 'password_not_ends_with', alias?: string  } 
  | { name: 'birthday', alias?: string  } 
  | { name: 'birthday_not', alias?: string  } 
  | { name: 'birthday_in', alias?: string  } 
  | { name: 'birthday_not_in', alias?: string  } 
  | { name: 'birthday_lt', alias?: string  } 
  | { name: 'birthday_lte', alias?: string  } 
  | { name: 'birthday_gt', alias?: string  } 
  | { name: 'birthday_gte', alias?: string  } 
  | { name: 'birthday_contains', alias?: string  } 
  | { name: 'birthday_not_contains', alias?: string  } 
  | { name: 'birthday_starts_with', alias?: string  } 
  | { name: 'birthday_not_starts_with', alias?: string  } 
  | { name: 'birthday_ends_with', alias?: string  } 
  | { name: 'birthday_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'doctors_every', alias?: string  } 
  | { name: 'doctors_some', alias?: string  } 
  | { name: 'doctors_none', alias?: string  } 
  | { name: 'surveys_every', alias?: string  } 
  | { name: 'surveys_some', alias?: string  } 
  | { name: 'surveys_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface DoctorWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  password?: string | null
  password_not?: string | null
  password_in?: string[]
  password_not_in?: string[]
  password_lt?: string | null
  password_lte?: string | null
  password_gt?: string | null
  password_gte?: string | null
  password_contains?: string | null
  password_not_contains?: string | null
  password_starts_with?: string | null
  password_not_starts_with?: string | null
  password_ends_with?: string | null
  password_not_ends_with?: string | null
  speciality?: string | null
  speciality_not?: string | null
  speciality_in?: string[]
  speciality_not_in?: string[]
  speciality_lt?: string | null
  speciality_lte?: string | null
  speciality_gt?: string | null
  speciality_gte?: string | null
  speciality_contains?: string | null
  speciality_not_contains?: string | null
  speciality_starts_with?: string | null
  speciality_not_starts_with?: string | null
  speciality_ends_with?: string | null
  speciality_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  patients_every?: PatientWhereInput | null
  patients_some?: PatientWhereInput | null
  patients_none?: PatientWhereInput | null
  surveys_every?: SurveyWhereInput | null
  surveys_some?: SurveyWhereInput | null
  surveys_none?: SurveyWhereInput | null
  AND?: DoctorWhereInput[]
  OR?: DoctorWhereInput[]
  NOT?: DoctorWhereInput[]
}
export type DoctorWhereInputInputObject =
  | Extract<keyof DoctorWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'password_not', alias?: string  } 
  | { name: 'password_in', alias?: string  } 
  | { name: 'password_not_in', alias?: string  } 
  | { name: 'password_lt', alias?: string  } 
  | { name: 'password_lte', alias?: string  } 
  | { name: 'password_gt', alias?: string  } 
  | { name: 'password_gte', alias?: string  } 
  | { name: 'password_contains', alias?: string  } 
  | { name: 'password_not_contains', alias?: string  } 
  | { name: 'password_starts_with', alias?: string  } 
  | { name: 'password_not_starts_with', alias?: string  } 
  | { name: 'password_ends_with', alias?: string  } 
  | { name: 'password_not_ends_with', alias?: string  } 
  | { name: 'speciality', alias?: string  } 
  | { name: 'speciality_not', alias?: string  } 
  | { name: 'speciality_in', alias?: string  } 
  | { name: 'speciality_not_in', alias?: string  } 
  | { name: 'speciality_lt', alias?: string  } 
  | { name: 'speciality_lte', alias?: string  } 
  | { name: 'speciality_gt', alias?: string  } 
  | { name: 'speciality_gte', alias?: string  } 
  | { name: 'speciality_contains', alias?: string  } 
  | { name: 'speciality_not_contains', alias?: string  } 
  | { name: 'speciality_starts_with', alias?: string  } 
  | { name: 'speciality_not_starts_with', alias?: string  } 
  | { name: 'speciality_ends_with', alias?: string  } 
  | { name: 'speciality_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'patients_every', alias?: string  } 
  | { name: 'patients_some', alias?: string  } 
  | { name: 'patients_none', alias?: string  } 
  | { name: 'surveys_every', alias?: string  } 
  | { name: 'surveys_some', alias?: string  } 
  | { name: 'surveys_none', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface SurveyWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  published?: boolean | null
  published_not?: boolean | null
  answered?: boolean | null
  answered_not?: boolean | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  content?: string | null
  content_not?: string | null
  content_in?: string[]
  content_not_in?: string[]
  content_lt?: string | null
  content_lte?: string | null
  content_gt?: string | null
  content_gte?: string | null
  content_contains?: string | null
  content_not_contains?: string | null
  content_starts_with?: string | null
  content_not_starts_with?: string | null
  content_ends_with?: string | null
  content_not_ends_with?: string | null
  submitter?: DoctorWhereInput | null
  patient?: PatientWhereInput | null
  AND?: SurveyWhereInput[]
  OR?: SurveyWhereInput[]
  NOT?: SurveyWhereInput[]
}
export type SurveyWhereInputInputObject =
  | Extract<keyof SurveyWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'published', alias?: string  } 
  | { name: 'published_not', alias?: string  } 
  | { name: 'answered', alias?: string  } 
  | { name: 'answered_not', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'content_not', alias?: string  } 
  | { name: 'content_in', alias?: string  } 
  | { name: 'content_not_in', alias?: string  } 
  | { name: 'content_lt', alias?: string  } 
  | { name: 'content_lte', alias?: string  } 
  | { name: 'content_gt', alias?: string  } 
  | { name: 'content_gte', alias?: string  } 
  | { name: 'content_contains', alias?: string  } 
  | { name: 'content_not_contains', alias?: string  } 
  | { name: 'content_starts_with', alias?: string  } 
  | { name: 'content_not_starts_with', alias?: string  } 
  | { name: 'content_ends_with', alias?: string  } 
  | { name: 'content_not_ends_with', alias?: string  } 
  | { name: 'submitter', alias?: string  } 
  | { name: 'patient', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PatientWhereUniqueInput {
  id?: string | null
  email?: string | null
}
export type PatientWhereUniqueInputInputObject =
  | Extract<keyof PatientWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  
export interface SurveyWhereUniqueInput {
  id?: string | null
}
export type SurveyWhereUniqueInputInputObject =
  | Extract<keyof SurveyWhereUniqueInput, string>
  | { name: 'id', alias?: string  } 
  
export interface DoctorCreateInput {
  id?: string | null
  email?: string
  password?: string
  speciality?: string
  name?: string
  patients?: PatientCreateManyWithoutDoctorsInput | null
  surveys?: SurveyCreateManyWithoutSubmitterInput | null
}
export type DoctorCreateInputInputObject =
  | Extract<keyof DoctorCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'speciality', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'patients', alias?: string  } 
  | { name: 'surveys', alias?: string  } 
  
export interface PatientCreateManyWithoutDoctorsInput {
  create?: PatientCreateWithoutDoctorsInput[]
  connect?: PatientWhereUniqueInput[]
}
export type PatientCreateManyWithoutDoctorsInputInputObject =
  | Extract<keyof PatientCreateManyWithoutDoctorsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PatientCreateWithoutDoctorsInput {
  id?: string | null
  email?: string
  password?: string
  birthday?: string
  name?: string
  surveys?: SurveyCreateManyWithoutPatientInput | null
}
export type PatientCreateWithoutDoctorsInputInputObject =
  | Extract<keyof PatientCreateWithoutDoctorsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'birthday', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'surveys', alias?: string  } 
  
export interface SurveyCreateManyWithoutPatientInput {
  create?: SurveyCreateWithoutPatientInput[]
  connect?: SurveyWhereUniqueInput[]
}
export type SurveyCreateManyWithoutPatientInputInputObject =
  | Extract<keyof SurveyCreateManyWithoutPatientInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface SurveyCreateWithoutPatientInput {
  id?: string | null
  published?: boolean | null
  answered?: boolean | null
  title?: string
  content?: string
  submitter?: DoctorCreateOneWithoutSurveysInput
}
export type SurveyCreateWithoutPatientInputInputObject =
  | Extract<keyof SurveyCreateWithoutPatientInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'published', alias?: string  } 
  | { name: 'answered', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'submitter', alias?: string  } 
  
export interface DoctorCreateOneWithoutSurveysInput {
  create?: DoctorCreateWithoutSurveysInput | null
  connect?: DoctorWhereUniqueInput | null
}
export type DoctorCreateOneWithoutSurveysInputInputObject =
  | Extract<keyof DoctorCreateOneWithoutSurveysInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface DoctorCreateWithoutSurveysInput {
  id?: string | null
  email?: string
  password?: string
  speciality?: string
  name?: string
  patients?: PatientCreateManyWithoutDoctorsInput | null
}
export type DoctorCreateWithoutSurveysInputInputObject =
  | Extract<keyof DoctorCreateWithoutSurveysInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'speciality', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'patients', alias?: string  } 
  
export interface SurveyCreateManyWithoutSubmitterInput {
  create?: SurveyCreateWithoutSubmitterInput[]
  connect?: SurveyWhereUniqueInput[]
}
export type SurveyCreateManyWithoutSubmitterInputInputObject =
  | Extract<keyof SurveyCreateManyWithoutSubmitterInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface SurveyCreateWithoutSubmitterInput {
  id?: string | null
  published?: boolean | null
  answered?: boolean | null
  title?: string
  content?: string
  patient?: PatientCreateOneWithoutSurveysInput
}
export type SurveyCreateWithoutSubmitterInputInputObject =
  | Extract<keyof SurveyCreateWithoutSubmitterInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'published', alias?: string  } 
  | { name: 'answered', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'patient', alias?: string  } 
  
export interface PatientCreateOneWithoutSurveysInput {
  create?: PatientCreateWithoutSurveysInput | null
  connect?: PatientWhereUniqueInput | null
}
export type PatientCreateOneWithoutSurveysInputInputObject =
  | Extract<keyof PatientCreateOneWithoutSurveysInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PatientCreateWithoutSurveysInput {
  id?: string | null
  email?: string
  password?: string
  birthday?: string
  name?: string
  doctors?: DoctorCreateManyWithoutPatientsInput | null
}
export type PatientCreateWithoutSurveysInputInputObject =
  | Extract<keyof PatientCreateWithoutSurveysInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'birthday', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'doctors', alias?: string  } 
  
export interface DoctorCreateManyWithoutPatientsInput {
  create?: DoctorCreateWithoutPatientsInput[]
  connect?: DoctorWhereUniqueInput[]
}
export type DoctorCreateManyWithoutPatientsInputInputObject =
  | Extract<keyof DoctorCreateManyWithoutPatientsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface DoctorCreateWithoutPatientsInput {
  id?: string | null
  email?: string
  password?: string
  speciality?: string
  name?: string
  surveys?: SurveyCreateManyWithoutSubmitterInput | null
}
export type DoctorCreateWithoutPatientsInputInputObject =
  | Extract<keyof DoctorCreateWithoutPatientsInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'speciality', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'surveys', alias?: string  } 
  
export interface DoctorUpdateInput {
  email?: string | null
  password?: string | null
  speciality?: string | null
  name?: string | null
  patients?: PatientUpdateManyWithoutDoctorsInput | null
  surveys?: SurveyUpdateManyWithoutSubmitterInput | null
}
export type DoctorUpdateInputInputObject =
  | Extract<keyof DoctorUpdateInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'speciality', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'patients', alias?: string  } 
  | { name: 'surveys', alias?: string  } 
  
export interface PatientUpdateManyWithoutDoctorsInput {
  create?: PatientCreateWithoutDoctorsInput[]
  delete?: PatientWhereUniqueInput[]
  connect?: PatientWhereUniqueInput[]
  set?: PatientWhereUniqueInput[]
  disconnect?: PatientWhereUniqueInput[]
  update?: PatientUpdateWithWhereUniqueWithoutDoctorsInput[]
  upsert?: PatientUpsertWithWhereUniqueWithoutDoctorsInput[]
  deleteMany?: PatientScalarWhereInput[]
  updateMany?: PatientUpdateManyWithWhereNestedInput[]
}
export type PatientUpdateManyWithoutDoctorsInputInputObject =
  | Extract<keyof PatientUpdateManyWithoutDoctorsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface PatientUpdateWithWhereUniqueWithoutDoctorsInput {
  where?: PatientWhereUniqueInput
  data?: PatientUpdateWithoutDoctorsDataInput
}
export type PatientUpdateWithWhereUniqueWithoutDoctorsInputInputObject =
  | Extract<keyof PatientUpdateWithWhereUniqueWithoutDoctorsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface PatientUpdateWithoutDoctorsDataInput {
  email?: string | null
  password?: string | null
  birthday?: string | null
  name?: string | null
  surveys?: SurveyUpdateManyWithoutPatientInput | null
}
export type PatientUpdateWithoutDoctorsDataInputInputObject =
  | Extract<keyof PatientUpdateWithoutDoctorsDataInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'birthday', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'surveys', alias?: string  } 
  
export interface SurveyUpdateManyWithoutPatientInput {
  create?: SurveyCreateWithoutPatientInput[]
  delete?: SurveyWhereUniqueInput[]
  connect?: SurveyWhereUniqueInput[]
  set?: SurveyWhereUniqueInput[]
  disconnect?: SurveyWhereUniqueInput[]
  update?: SurveyUpdateWithWhereUniqueWithoutPatientInput[]
  upsert?: SurveyUpsertWithWhereUniqueWithoutPatientInput[]
  deleteMany?: SurveyScalarWhereInput[]
  updateMany?: SurveyUpdateManyWithWhereNestedInput[]
}
export type SurveyUpdateManyWithoutPatientInputInputObject =
  | Extract<keyof SurveyUpdateManyWithoutPatientInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface SurveyUpdateWithWhereUniqueWithoutPatientInput {
  where?: SurveyWhereUniqueInput
  data?: SurveyUpdateWithoutPatientDataInput
}
export type SurveyUpdateWithWhereUniqueWithoutPatientInputInputObject =
  | Extract<keyof SurveyUpdateWithWhereUniqueWithoutPatientInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface SurveyUpdateWithoutPatientDataInput {
  published?: boolean | null
  answered?: boolean | null
  title?: string | null
  content?: string | null
  submitter?: DoctorUpdateOneRequiredWithoutSurveysInput | null
}
export type SurveyUpdateWithoutPatientDataInputInputObject =
  | Extract<keyof SurveyUpdateWithoutPatientDataInput, string>
  | { name: 'published', alias?: string  } 
  | { name: 'answered', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'submitter', alias?: string  } 
  
export interface DoctorUpdateOneRequiredWithoutSurveysInput {
  create?: DoctorCreateWithoutSurveysInput | null
  update?: DoctorUpdateWithoutSurveysDataInput | null
  upsert?: DoctorUpsertWithoutSurveysInput | null
  connect?: DoctorWhereUniqueInput | null
}
export type DoctorUpdateOneRequiredWithoutSurveysInputInputObject =
  | Extract<keyof DoctorUpdateOneRequiredWithoutSurveysInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface DoctorUpdateWithoutSurveysDataInput {
  email?: string | null
  password?: string | null
  speciality?: string | null
  name?: string | null
  patients?: PatientUpdateManyWithoutDoctorsInput | null
}
export type DoctorUpdateWithoutSurveysDataInputInputObject =
  | Extract<keyof DoctorUpdateWithoutSurveysDataInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'speciality', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'patients', alias?: string  } 
  
export interface DoctorUpsertWithoutSurveysInput {
  update?: DoctorUpdateWithoutSurveysDataInput
  create?: DoctorCreateWithoutSurveysInput
}
export type DoctorUpsertWithoutSurveysInputInputObject =
  | Extract<keyof DoctorUpsertWithoutSurveysInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface SurveyUpsertWithWhereUniqueWithoutPatientInput {
  where?: SurveyWhereUniqueInput
  update?: SurveyUpdateWithoutPatientDataInput
  create?: SurveyCreateWithoutPatientInput
}
export type SurveyUpsertWithWhereUniqueWithoutPatientInputInputObject =
  | Extract<keyof SurveyUpsertWithWhereUniqueWithoutPatientInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface SurveyScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  createdAt?: string | null
  createdAt_not?: string | null
  createdAt_in?: string[]
  createdAt_not_in?: string[]
  createdAt_lt?: string | null
  createdAt_lte?: string | null
  createdAt_gt?: string | null
  createdAt_gte?: string | null
  updatedAt?: string | null
  updatedAt_not?: string | null
  updatedAt_in?: string[]
  updatedAt_not_in?: string[]
  updatedAt_lt?: string | null
  updatedAt_lte?: string | null
  updatedAt_gt?: string | null
  updatedAt_gte?: string | null
  published?: boolean | null
  published_not?: boolean | null
  answered?: boolean | null
  answered_not?: boolean | null
  title?: string | null
  title_not?: string | null
  title_in?: string[]
  title_not_in?: string[]
  title_lt?: string | null
  title_lte?: string | null
  title_gt?: string | null
  title_gte?: string | null
  title_contains?: string | null
  title_not_contains?: string | null
  title_starts_with?: string | null
  title_not_starts_with?: string | null
  title_ends_with?: string | null
  title_not_ends_with?: string | null
  content?: string | null
  content_not?: string | null
  content_in?: string[]
  content_not_in?: string[]
  content_lt?: string | null
  content_lte?: string | null
  content_gt?: string | null
  content_gte?: string | null
  content_contains?: string | null
  content_not_contains?: string | null
  content_starts_with?: string | null
  content_not_starts_with?: string | null
  content_ends_with?: string | null
  content_not_ends_with?: string | null
  AND?: SurveyScalarWhereInput[]
  OR?: SurveyScalarWhereInput[]
  NOT?: SurveyScalarWhereInput[]
}
export type SurveyScalarWhereInputInputObject =
  | Extract<keyof SurveyScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'createdAt', alias?: string  } 
  | { name: 'createdAt_not', alias?: string  } 
  | { name: 'createdAt_in', alias?: string  } 
  | { name: 'createdAt_not_in', alias?: string  } 
  | { name: 'createdAt_lt', alias?: string  } 
  | { name: 'createdAt_lte', alias?: string  } 
  | { name: 'createdAt_gt', alias?: string  } 
  | { name: 'createdAt_gte', alias?: string  } 
  | { name: 'updatedAt', alias?: string  } 
  | { name: 'updatedAt_not', alias?: string  } 
  | { name: 'updatedAt_in', alias?: string  } 
  | { name: 'updatedAt_not_in', alias?: string  } 
  | { name: 'updatedAt_lt', alias?: string  } 
  | { name: 'updatedAt_lte', alias?: string  } 
  | { name: 'updatedAt_gt', alias?: string  } 
  | { name: 'updatedAt_gte', alias?: string  } 
  | { name: 'published', alias?: string  } 
  | { name: 'published_not', alias?: string  } 
  | { name: 'answered', alias?: string  } 
  | { name: 'answered_not', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'title_not', alias?: string  } 
  | { name: 'title_in', alias?: string  } 
  | { name: 'title_not_in', alias?: string  } 
  | { name: 'title_lt', alias?: string  } 
  | { name: 'title_lte', alias?: string  } 
  | { name: 'title_gt', alias?: string  } 
  | { name: 'title_gte', alias?: string  } 
  | { name: 'title_contains', alias?: string  } 
  | { name: 'title_not_contains', alias?: string  } 
  | { name: 'title_starts_with', alias?: string  } 
  | { name: 'title_not_starts_with', alias?: string  } 
  | { name: 'title_ends_with', alias?: string  } 
  | { name: 'title_not_ends_with', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'content_not', alias?: string  } 
  | { name: 'content_in', alias?: string  } 
  | { name: 'content_not_in', alias?: string  } 
  | { name: 'content_lt', alias?: string  } 
  | { name: 'content_lte', alias?: string  } 
  | { name: 'content_gt', alias?: string  } 
  | { name: 'content_gte', alias?: string  } 
  | { name: 'content_contains', alias?: string  } 
  | { name: 'content_not_contains', alias?: string  } 
  | { name: 'content_starts_with', alias?: string  } 
  | { name: 'content_not_starts_with', alias?: string  } 
  | { name: 'content_ends_with', alias?: string  } 
  | { name: 'content_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface SurveyUpdateManyWithWhereNestedInput {
  where?: SurveyScalarWhereInput
  data?: SurveyUpdateManyDataInput
}
export type SurveyUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof SurveyUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface SurveyUpdateManyDataInput {
  published?: boolean | null
  answered?: boolean | null
  title?: string | null
  content?: string | null
}
export type SurveyUpdateManyDataInputInputObject =
  | Extract<keyof SurveyUpdateManyDataInput, string>
  | { name: 'published', alias?: string  } 
  | { name: 'answered', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  
export interface PatientUpsertWithWhereUniqueWithoutDoctorsInput {
  where?: PatientWhereUniqueInput
  update?: PatientUpdateWithoutDoctorsDataInput
  create?: PatientCreateWithoutDoctorsInput
}
export type PatientUpsertWithWhereUniqueWithoutDoctorsInputInputObject =
  | Extract<keyof PatientUpsertWithWhereUniqueWithoutDoctorsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface PatientScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  password?: string | null
  password_not?: string | null
  password_in?: string[]
  password_not_in?: string[]
  password_lt?: string | null
  password_lte?: string | null
  password_gt?: string | null
  password_gte?: string | null
  password_contains?: string | null
  password_not_contains?: string | null
  password_starts_with?: string | null
  password_not_starts_with?: string | null
  password_ends_with?: string | null
  password_not_ends_with?: string | null
  birthday?: string | null
  birthday_not?: string | null
  birthday_in?: string[]
  birthday_not_in?: string[]
  birthday_lt?: string | null
  birthday_lte?: string | null
  birthday_gt?: string | null
  birthday_gte?: string | null
  birthday_contains?: string | null
  birthday_not_contains?: string | null
  birthday_starts_with?: string | null
  birthday_not_starts_with?: string | null
  birthday_ends_with?: string | null
  birthday_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  AND?: PatientScalarWhereInput[]
  OR?: PatientScalarWhereInput[]
  NOT?: PatientScalarWhereInput[]
}
export type PatientScalarWhereInputInputObject =
  | Extract<keyof PatientScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'password_not', alias?: string  } 
  | { name: 'password_in', alias?: string  } 
  | { name: 'password_not_in', alias?: string  } 
  | { name: 'password_lt', alias?: string  } 
  | { name: 'password_lte', alias?: string  } 
  | { name: 'password_gt', alias?: string  } 
  | { name: 'password_gte', alias?: string  } 
  | { name: 'password_contains', alias?: string  } 
  | { name: 'password_not_contains', alias?: string  } 
  | { name: 'password_starts_with', alias?: string  } 
  | { name: 'password_not_starts_with', alias?: string  } 
  | { name: 'password_ends_with', alias?: string  } 
  | { name: 'password_not_ends_with', alias?: string  } 
  | { name: 'birthday', alias?: string  } 
  | { name: 'birthday_not', alias?: string  } 
  | { name: 'birthday_in', alias?: string  } 
  | { name: 'birthday_not_in', alias?: string  } 
  | { name: 'birthday_lt', alias?: string  } 
  | { name: 'birthday_lte', alias?: string  } 
  | { name: 'birthday_gt', alias?: string  } 
  | { name: 'birthday_gte', alias?: string  } 
  | { name: 'birthday_contains', alias?: string  } 
  | { name: 'birthday_not_contains', alias?: string  } 
  | { name: 'birthday_starts_with', alias?: string  } 
  | { name: 'birthday_not_starts_with', alias?: string  } 
  | { name: 'birthday_ends_with', alias?: string  } 
  | { name: 'birthday_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PatientUpdateManyWithWhereNestedInput {
  where?: PatientScalarWhereInput
  data?: PatientUpdateManyDataInput
}
export type PatientUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof PatientUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface PatientUpdateManyDataInput {
  email?: string | null
  password?: string | null
  birthday?: string | null
  name?: string | null
}
export type PatientUpdateManyDataInputInputObject =
  | Extract<keyof PatientUpdateManyDataInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'birthday', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface SurveyUpdateManyWithoutSubmitterInput {
  create?: SurveyCreateWithoutSubmitterInput[]
  delete?: SurveyWhereUniqueInput[]
  connect?: SurveyWhereUniqueInput[]
  set?: SurveyWhereUniqueInput[]
  disconnect?: SurveyWhereUniqueInput[]
  update?: SurveyUpdateWithWhereUniqueWithoutSubmitterInput[]
  upsert?: SurveyUpsertWithWhereUniqueWithoutSubmitterInput[]
  deleteMany?: SurveyScalarWhereInput[]
  updateMany?: SurveyUpdateManyWithWhereNestedInput[]
}
export type SurveyUpdateManyWithoutSubmitterInputInputObject =
  | Extract<keyof SurveyUpdateManyWithoutSubmitterInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface SurveyUpdateWithWhereUniqueWithoutSubmitterInput {
  where?: SurveyWhereUniqueInput
  data?: SurveyUpdateWithoutSubmitterDataInput
}
export type SurveyUpdateWithWhereUniqueWithoutSubmitterInputInputObject =
  | Extract<keyof SurveyUpdateWithWhereUniqueWithoutSubmitterInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface SurveyUpdateWithoutSubmitterDataInput {
  published?: boolean | null
  answered?: boolean | null
  title?: string | null
  content?: string | null
  patient?: PatientUpdateOneRequiredWithoutSurveysInput | null
}
export type SurveyUpdateWithoutSubmitterDataInputInputObject =
  | Extract<keyof SurveyUpdateWithoutSubmitterDataInput, string>
  | { name: 'published', alias?: string  } 
  | { name: 'answered', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'patient', alias?: string  } 
  
export interface PatientUpdateOneRequiredWithoutSurveysInput {
  create?: PatientCreateWithoutSurveysInput | null
  update?: PatientUpdateWithoutSurveysDataInput | null
  upsert?: PatientUpsertWithoutSurveysInput | null
  connect?: PatientWhereUniqueInput | null
}
export type PatientUpdateOneRequiredWithoutSurveysInputInputObject =
  | Extract<keyof PatientUpdateOneRequiredWithoutSurveysInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  
export interface PatientUpdateWithoutSurveysDataInput {
  email?: string | null
  password?: string | null
  birthday?: string | null
  name?: string | null
  doctors?: DoctorUpdateManyWithoutPatientsInput | null
}
export type PatientUpdateWithoutSurveysDataInputInputObject =
  | Extract<keyof PatientUpdateWithoutSurveysDataInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'birthday', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'doctors', alias?: string  } 
  
export interface DoctorUpdateManyWithoutPatientsInput {
  create?: DoctorCreateWithoutPatientsInput[]
  delete?: DoctorWhereUniqueInput[]
  connect?: DoctorWhereUniqueInput[]
  set?: DoctorWhereUniqueInput[]
  disconnect?: DoctorWhereUniqueInput[]
  update?: DoctorUpdateWithWhereUniqueWithoutPatientsInput[]
  upsert?: DoctorUpsertWithWhereUniqueWithoutPatientsInput[]
  deleteMany?: DoctorScalarWhereInput[]
  updateMany?: DoctorUpdateManyWithWhereNestedInput[]
}
export type DoctorUpdateManyWithoutPatientsInputInputObject =
  | Extract<keyof DoctorUpdateManyWithoutPatientsInput, string>
  | { name: 'create', alias?: string  } 
  | { name: 'delete', alias?: string  } 
  | { name: 'connect', alias?: string  } 
  | { name: 'set', alias?: string  } 
  | { name: 'disconnect', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'upsert', alias?: string  } 
  | { name: 'deleteMany', alias?: string  } 
  | { name: 'updateMany', alias?: string  } 
  
export interface DoctorUpdateWithWhereUniqueWithoutPatientsInput {
  where?: DoctorWhereUniqueInput
  data?: DoctorUpdateWithoutPatientsDataInput
}
export type DoctorUpdateWithWhereUniqueWithoutPatientsInputInputObject =
  | Extract<keyof DoctorUpdateWithWhereUniqueWithoutPatientsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface DoctorUpdateWithoutPatientsDataInput {
  email?: string | null
  password?: string | null
  speciality?: string | null
  name?: string | null
  surveys?: SurveyUpdateManyWithoutSubmitterInput | null
}
export type DoctorUpdateWithoutPatientsDataInputInputObject =
  | Extract<keyof DoctorUpdateWithoutPatientsDataInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'speciality', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'surveys', alias?: string  } 
  
export interface DoctorUpsertWithWhereUniqueWithoutPatientsInput {
  where?: DoctorWhereUniqueInput
  update?: DoctorUpdateWithoutPatientsDataInput
  create?: DoctorCreateWithoutPatientsInput
}
export type DoctorUpsertWithWhereUniqueWithoutPatientsInputInputObject =
  | Extract<keyof DoctorUpsertWithWhereUniqueWithoutPatientsInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface DoctorScalarWhereInput {
  id?: string | null
  id_not?: string | null
  id_in?: string[]
  id_not_in?: string[]
  id_lt?: string | null
  id_lte?: string | null
  id_gt?: string | null
  id_gte?: string | null
  id_contains?: string | null
  id_not_contains?: string | null
  id_starts_with?: string | null
  id_not_starts_with?: string | null
  id_ends_with?: string | null
  id_not_ends_with?: string | null
  email?: string | null
  email_not?: string | null
  email_in?: string[]
  email_not_in?: string[]
  email_lt?: string | null
  email_lte?: string | null
  email_gt?: string | null
  email_gte?: string | null
  email_contains?: string | null
  email_not_contains?: string | null
  email_starts_with?: string | null
  email_not_starts_with?: string | null
  email_ends_with?: string | null
  email_not_ends_with?: string | null
  password?: string | null
  password_not?: string | null
  password_in?: string[]
  password_not_in?: string[]
  password_lt?: string | null
  password_lte?: string | null
  password_gt?: string | null
  password_gte?: string | null
  password_contains?: string | null
  password_not_contains?: string | null
  password_starts_with?: string | null
  password_not_starts_with?: string | null
  password_ends_with?: string | null
  password_not_ends_with?: string | null
  speciality?: string | null
  speciality_not?: string | null
  speciality_in?: string[]
  speciality_not_in?: string[]
  speciality_lt?: string | null
  speciality_lte?: string | null
  speciality_gt?: string | null
  speciality_gte?: string | null
  speciality_contains?: string | null
  speciality_not_contains?: string | null
  speciality_starts_with?: string | null
  speciality_not_starts_with?: string | null
  speciality_ends_with?: string | null
  speciality_not_ends_with?: string | null
  name?: string | null
  name_not?: string | null
  name_in?: string[]
  name_not_in?: string[]
  name_lt?: string | null
  name_lte?: string | null
  name_gt?: string | null
  name_gte?: string | null
  name_contains?: string | null
  name_not_contains?: string | null
  name_starts_with?: string | null
  name_not_starts_with?: string | null
  name_ends_with?: string | null
  name_not_ends_with?: string | null
  AND?: DoctorScalarWhereInput[]
  OR?: DoctorScalarWhereInput[]
  NOT?: DoctorScalarWhereInput[]
}
export type DoctorScalarWhereInputInputObject =
  | Extract<keyof DoctorScalarWhereInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'id_not', alias?: string  } 
  | { name: 'id_in', alias?: string  } 
  | { name: 'id_not_in', alias?: string  } 
  | { name: 'id_lt', alias?: string  } 
  | { name: 'id_lte', alias?: string  } 
  | { name: 'id_gt', alias?: string  } 
  | { name: 'id_gte', alias?: string  } 
  | { name: 'id_contains', alias?: string  } 
  | { name: 'id_not_contains', alias?: string  } 
  | { name: 'id_starts_with', alias?: string  } 
  | { name: 'id_not_starts_with', alias?: string  } 
  | { name: 'id_ends_with', alias?: string  } 
  | { name: 'id_not_ends_with', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'email_not', alias?: string  } 
  | { name: 'email_in', alias?: string  } 
  | { name: 'email_not_in', alias?: string  } 
  | { name: 'email_lt', alias?: string  } 
  | { name: 'email_lte', alias?: string  } 
  | { name: 'email_gt', alias?: string  } 
  | { name: 'email_gte', alias?: string  } 
  | { name: 'email_contains', alias?: string  } 
  | { name: 'email_not_contains', alias?: string  } 
  | { name: 'email_starts_with', alias?: string  } 
  | { name: 'email_not_starts_with', alias?: string  } 
  | { name: 'email_ends_with', alias?: string  } 
  | { name: 'email_not_ends_with', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'password_not', alias?: string  } 
  | { name: 'password_in', alias?: string  } 
  | { name: 'password_not_in', alias?: string  } 
  | { name: 'password_lt', alias?: string  } 
  | { name: 'password_lte', alias?: string  } 
  | { name: 'password_gt', alias?: string  } 
  | { name: 'password_gte', alias?: string  } 
  | { name: 'password_contains', alias?: string  } 
  | { name: 'password_not_contains', alias?: string  } 
  | { name: 'password_starts_with', alias?: string  } 
  | { name: 'password_not_starts_with', alias?: string  } 
  | { name: 'password_ends_with', alias?: string  } 
  | { name: 'password_not_ends_with', alias?: string  } 
  | { name: 'speciality', alias?: string  } 
  | { name: 'speciality_not', alias?: string  } 
  | { name: 'speciality_in', alias?: string  } 
  | { name: 'speciality_not_in', alias?: string  } 
  | { name: 'speciality_lt', alias?: string  } 
  | { name: 'speciality_lte', alias?: string  } 
  | { name: 'speciality_gt', alias?: string  } 
  | { name: 'speciality_gte', alias?: string  } 
  | { name: 'speciality_contains', alias?: string  } 
  | { name: 'speciality_not_contains', alias?: string  } 
  | { name: 'speciality_starts_with', alias?: string  } 
  | { name: 'speciality_not_starts_with', alias?: string  } 
  | { name: 'speciality_ends_with', alias?: string  } 
  | { name: 'speciality_not_ends_with', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'name_not', alias?: string  } 
  | { name: 'name_in', alias?: string  } 
  | { name: 'name_not_in', alias?: string  } 
  | { name: 'name_lt', alias?: string  } 
  | { name: 'name_lte', alias?: string  } 
  | { name: 'name_gt', alias?: string  } 
  | { name: 'name_gte', alias?: string  } 
  | { name: 'name_contains', alias?: string  } 
  | { name: 'name_not_contains', alias?: string  } 
  | { name: 'name_starts_with', alias?: string  } 
  | { name: 'name_not_starts_with', alias?: string  } 
  | { name: 'name_ends_with', alias?: string  } 
  | { name: 'name_not_ends_with', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface DoctorUpdateManyWithWhereNestedInput {
  where?: DoctorScalarWhereInput
  data?: DoctorUpdateManyDataInput
}
export type DoctorUpdateManyWithWhereNestedInputInputObject =
  | Extract<keyof DoctorUpdateManyWithWhereNestedInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'data', alias?: string  } 
  
export interface DoctorUpdateManyDataInput {
  email?: string | null
  password?: string | null
  speciality?: string | null
  name?: string | null
}
export type DoctorUpdateManyDataInputInputObject =
  | Extract<keyof DoctorUpdateManyDataInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'speciality', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface PatientUpsertWithoutSurveysInput {
  update?: PatientUpdateWithoutSurveysDataInput
  create?: PatientCreateWithoutSurveysInput
}
export type PatientUpsertWithoutSurveysInputInputObject =
  | Extract<keyof PatientUpsertWithoutSurveysInput, string>
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface SurveyUpsertWithWhereUniqueWithoutSubmitterInput {
  where?: SurveyWhereUniqueInput
  update?: SurveyUpdateWithoutSubmitterDataInput
  create?: SurveyCreateWithoutSubmitterInput
}
export type SurveyUpsertWithWhereUniqueWithoutSubmitterInputInputObject =
  | Extract<keyof SurveyUpsertWithWhereUniqueWithoutSubmitterInput, string>
  | { name: 'where', alias?: string  } 
  | { name: 'update', alias?: string  } 
  | { name: 'create', alias?: string  } 
  
export interface DoctorUpdateManyMutationInput {
  email?: string | null
  password?: string | null
  speciality?: string | null
  name?: string | null
}
export type DoctorUpdateManyMutationInputInputObject =
  | Extract<keyof DoctorUpdateManyMutationInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'speciality', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface PatientCreateInput {
  id?: string | null
  email?: string
  password?: string
  birthday?: string
  name?: string
  doctors?: DoctorCreateManyWithoutPatientsInput | null
  surveys?: SurveyCreateManyWithoutPatientInput | null
}
export type PatientCreateInputInputObject =
  | Extract<keyof PatientCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'birthday', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'doctors', alias?: string  } 
  | { name: 'surveys', alias?: string  } 
  
export interface PatientUpdateInput {
  email?: string | null
  password?: string | null
  birthday?: string | null
  name?: string | null
  doctors?: DoctorUpdateManyWithoutPatientsInput | null
  surveys?: SurveyUpdateManyWithoutPatientInput | null
}
export type PatientUpdateInputInputObject =
  | Extract<keyof PatientUpdateInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'birthday', alias?: string  } 
  | { name: 'name', alias?: string  } 
  | { name: 'doctors', alias?: string  } 
  | { name: 'surveys', alias?: string  } 
  
export interface PatientUpdateManyMutationInput {
  email?: string | null
  password?: string | null
  birthday?: string | null
  name?: string | null
}
export type PatientUpdateManyMutationInputInputObject =
  | Extract<keyof PatientUpdateManyMutationInput, string>
  | { name: 'email', alias?: string  } 
  | { name: 'password', alias?: string  } 
  | { name: 'birthday', alias?: string  } 
  | { name: 'name', alias?: string  } 
  
export interface SurveyCreateInput {
  id?: string | null
  published?: boolean | null
  answered?: boolean | null
  title?: string
  content?: string
  submitter?: DoctorCreateOneWithoutSurveysInput
  patient?: PatientCreateOneWithoutSurveysInput
}
export type SurveyCreateInputInputObject =
  | Extract<keyof SurveyCreateInput, string>
  | { name: 'id', alias?: string  } 
  | { name: 'published', alias?: string  } 
  | { name: 'answered', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'submitter', alias?: string  } 
  | { name: 'patient', alias?: string  } 
  
export interface SurveyUpdateInput {
  published?: boolean | null
  answered?: boolean | null
  title?: string | null
  content?: string | null
  submitter?: DoctorUpdateOneRequiredWithoutSurveysInput | null
  patient?: PatientUpdateOneRequiredWithoutSurveysInput | null
}
export type SurveyUpdateInputInputObject =
  | Extract<keyof SurveyUpdateInput, string>
  | { name: 'published', alias?: string  } 
  | { name: 'answered', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  | { name: 'submitter', alias?: string  } 
  | { name: 'patient', alias?: string  } 
  
export interface SurveyUpdateManyMutationInput {
  published?: boolean | null
  answered?: boolean | null
  title?: string | null
  content?: string | null
}
export type SurveyUpdateManyMutationInputInputObject =
  | Extract<keyof SurveyUpdateManyMutationInput, string>
  | { name: 'published', alias?: string  } 
  | { name: 'answered', alias?: string  } 
  | { name: 'title', alias?: string  } 
  | { name: 'content', alias?: string  } 
  
export interface DoctorSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: DoctorWhereInput | null
  AND?: DoctorSubscriptionWhereInput[]
  OR?: DoctorSubscriptionWhereInput[]
  NOT?: DoctorSubscriptionWhereInput[]
}
export type DoctorSubscriptionWhereInputInputObject =
  | Extract<keyof DoctorSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface PatientSubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: PatientWhereInput | null
  AND?: PatientSubscriptionWhereInput[]
  OR?: PatientSubscriptionWhereInput[]
  NOT?: PatientSubscriptionWhereInput[]
}
export type PatientSubscriptionWhereInputInputObject =
  | Extract<keyof PatientSubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  
export interface SurveySubscriptionWhereInput {
  mutation_in?: prisma.MutationType[]
  updatedFields_contains?: string | null
  updatedFields_contains_every?: string[]
  updatedFields_contains_some?: string[]
  node?: SurveyWhereInput | null
  AND?: SurveySubscriptionWhereInput[]
  OR?: SurveySubscriptionWhereInput[]
  NOT?: SurveySubscriptionWhereInput[]
}
export type SurveySubscriptionWhereInputInputObject =
  | Extract<keyof SurveySubscriptionWhereInput, string>
  | { name: 'mutation_in', alias?: string  } 
  | { name: 'updatedFields_contains', alias?: string  } 
  | { name: 'updatedFields_contains_every', alias?: string  } 
  | { name: 'updatedFields_contains_some', alias?: string  } 
  | { name: 'node', alias?: string  } 
  | { name: 'AND', alias?: string  } 
  | { name: 'OR', alias?: string  } 
  | { name: 'NOT', alias?: string  } 
  

export type PatientOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'password_ASC'
  | 'password_DESC'
  | 'birthday_ASC'
  | 'birthday_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type DoctorOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'email_ASC'
  | 'email_DESC'
  | 'password_ASC'
  | 'password_DESC'
  | 'speciality_ASC'
  | 'speciality_DESC'
  | 'name_ASC'
  | 'name_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  
export type SurveyOrderByInputValues =
  | 'id_ASC'
  | 'id_DESC'
  | 'createdAt_ASC'
  | 'createdAt_DESC'
  | 'updatedAt_ASC'
  | 'updatedAt_DESC'
  | 'published_ASC'
  | 'published_DESC'
  | 'answered_ASC'
  | 'answered_DESC'
  | 'title_ASC'
  | 'title_DESC'
  | 'content_ASC'
  | 'content_DESC'
  
export type MutationTypeValues =
  | 'CREATED'
  | 'UPDATED'
  | 'DELETED'
  
  